{"version":3,"sources":["firebase.js","AutoComplete.js","AddJob.js","OpenApplications.js","Info.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","AutoComplete","handleTitleChange","titleRef","display","suggestions","handleSelect","e","current","value","target","style","size","map","suggestion","index","onClick","AddJob","useState","showSuggestions","setShowSuggestions","suggestionList","setSuggestionList","filtered","setFiltered","useRef","jobTitle","companyName","datePosted","postingOrigin","jobType","contactName","contactPhone","contactEmail","jobNotes","location","dateSubmitted","followOne","followTwo","followThree","resume","coverLetter","job","setJob","handleChange","name","handleSubmit","a","preventDefault","dbRef","database","ref","submission","Date","submissionDate","toDateString","followUp","followUps","i","setDate","getDate","push","method","onSubmit","htmlFor","type","onChange","onKeyDown","query","retrieveSuggestions","fetch","res","json","tempSuggestions","normalized_job_title","sort","length","partialSuggestion","toLowerCase","filteredList","includes","filterSuggestions","OpenApplications","jobList","id","key","href","Info","rel","App","setJobList","useEffect","on","snapshot","firebaseData","val","jobsFromDb","jobDetails","className","to","path","render","props","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c49ad7a8.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst config = {\n  apiKey: \"AIzaSyDodnHoN1lhaJPBTc5ln7KzsUI91Ny387o\",\n  authDomain: \"career-caddie.firebaseapp.com\",\n  projectId: \"career-caddie\",\n  storageBucket: \"career-caddie.appspot.com\",\n  messagingSenderId: \"828482300798\",\n  appId: \"1:828482300798:web:e4f3e152b48e926b68a12f\"\n};\nfirebase.initializeApp(config);\n\nexport default firebase;","function AutoComplete({handleTitleChange, titleRef, display, suggestions}) {\n\n  \n\n  const handleSelect = (e) => {\n    titleRef.current.value = e.target.value;\n    handleTitleChange(e);\n  }\n\n\n  return (\n        \n    <div style={{display: display ? 'block' : 'none' }} >\n      <select size=\"5\">\n      {suggestions.map((suggestion, index) => {\n        return <option key={index} value={suggestion} onClick={handleSelect}>\n            {suggestion}\n          </option>\n      })}\n      </select>      \n      \n    </div>\n  )\n}\n\nexport default AutoComplete;","import { useState, useRef } from 'react';\nimport firebase from './firebase.js';\nimport AutoComplete from './AutoComplete';\n\nfunction AddJob() {\n\n  // Initialize states\n  const [ showSuggestions, setShowSuggestions ] = useState(false);\n  const [ suggestionList, setSuggestionList] = useState(['']);\n  const [ filtered, setFiltered  ] = useState([]);\n  const titleRef = useRef();\n  const [ job, setJob ] = useState({\n    jobTitle: '',\n    companyName: '',\n    datePosted: '',\n    postingOrigin: '',\n    jobType: 'Fulltime',\n    contactName: '',\n    contactPhone: '',\n    contactEmail: '',\n    jobNotes: '',\n    location: '',\n    dateSubmitted: '',\n    followOne: '', \n    followTwo: '', \n    followThree: '',\n    resume: false,\n    coverLetter: false,\n  })\n\n  const handleChange = (e) => {    \n    const value = e.target.value;\n\n    setJob({\n      ...job,\n      [e.target.name]: value\n    });\n  }\n\n  const handleTitleChange = (e) => {    \n    const value = e.target.value;\n\n    setJob({\n      ...job,\n      jobTitle: value\n    });\n  }\n\n  const handleAutoComplete = (e) => {\n    const query = e.target.value;\n\n    const filterSuggestions = (e) => {\n      const partialSuggestion = e.toLowerCase();\n      const filteredList = [];\n\n      suggestionList.map((suggestion) => (\n        suggestion.includes(partialSuggestion) ? filteredList.push(suggestion) : null\n      ));\n    \n      setFiltered(filteredList);\n    }\n\n    const retrieveSuggestions = async (query) => {\n      const res = await fetch(`http://api.dataatwork.org/v1/jobs/autocomplete?begins_with=${query}`);\n      const json = await res.json();\n      const tempSuggestions = [];\n      \n      json.map((suggestion) => (\n        tempSuggestions.push(suggestion.normalized_job_title)\n      ));\n\n      setSuggestionList(tempSuggestions.sort());\n    }    \n\n    switch(query.length) {\n      case 3:\n        setFiltered([]);\n        retrieveSuggestions(query);\n        setShowSuggestions(true);\n        break;\n      case 2: case 1: case 0:\n        setShowSuggestions(false);\n        break;\n      default:\n        filterSuggestions(query);\n        break;\n    }\n  }\n\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const dbRef = firebase.database().ref('jobs');\n    const submission = new Date();\n    const submissionDate = new Date(submission).toDateString();\n    const followUp = submission;\n    const followUps = [];\n\n    for (let i = 1; i < 4; i++) {\n      followUp.setDate(followUp.getDate() + 7);\n      followUps.push(new Date(followUp).toDateString());\n    }\n\n    dbRef.push({\n      jobTitle: job.jobTitle,\n      companyName: job.companyName,\n      datePosted: job.datePosted,\n      postingOrigin: job.postingOrigin,\n      jobType: job.jobType,\n      contactName: job.contactName,\n      contactPhone: job.contactPhone,\n      contactEmail: job.contactEmail,\n      jobNotes: job.jobNotes,\n      location: job.location,\n      dateSubmitted: submissionDate,\n      followOne: followUps[0],\n      followTwo: followUps[1],\n      followThree: followUps[2] \n    })\n  }  \n\n  return (\n    <section>\n      <h1>Add New Job</h1>\n      <form method=\"post\" onSubmit={handleSubmit}>\n        <h2>Details</h2>\n\n        <label htmlFor=\"jobTitle\">Job Title (type 4 characters for suggestions)</label>\n        <input\n          type=\"text\"\n          name=\"jobTitle\"\n          ref={titleRef}\n          value={ job.jobTitle }\n          onChange={ handleTitleChange }       \n          onKeyDown={ handleAutoComplete }  \n        />\n        <AutoComplete handleTitleChange={handleTitleChange} titleRef={titleRef} display={showSuggestions} suggestions={filtered} />\n        <label htmlFor=\"companyName\">Company</label>\n        <input\n          type=\"text\"\n          name=\"companyName\"\n          value={ job.companyName }\n          onChange={ handleChange }\n        />\n        <label htmlFor=\"location\">Location</label>\n        <input\n          type=\"text\"\n          name=\"location\"\n          value={ job.location }\n          onChange={ handleChange }\n        />        \n        <label htmlFor=\"datePosted\">Date Posted</label>\n        <input\n          type=\"text\"\n          name=\"datePosted\"\n          value={ job.datePosted }\n          onChange={ handleChange }\n        />\n        <label htmlFor=\"postingOrigin\">Source</label>\n        <input\n          type=\"text\"\n          name=\"postingOrigin\"\n          value={ job.postingOrigin }\n          onChange={ handleChange }\n        />\n        <label htmlFor=\"jobType\">Job Type</label>\n        <select \n          name=\"jobType\"\n          value={ job.jobType } \n          onChange={ handleChange }>\n            <option value=\"Fulltime\">Full-Time</option>\n            <option value=\"Parttime\">Part-Time</option>\n            <option value=\"Internship\">Internship</option>\n            <option value=\"Volunteer\">Volunteer</option>\n        </select>\n        <h2>Contact Info</h2>\n        <label htmlFor=\"contactName\">Name</label>        \n        <input\n          type=\"text\"\n          name=\"contactName\"\n          value={ job.contactName }\n          onChange={ handleChange }\n        />\n        <label htmlFor=\"contactPhone\">Phone</label>        \n        <input\n          type=\"text\"\n          name=\"contactPhone\"\n          value={ job.contactPhone }\n          onChange={ handleChange }\n        />\n        <label htmlFor=\"contactEmail\">Email</label> \n        <input\n          type=\"text\"\n          name=\"contactEmail\"\n          value={ job.contactEmail }\n          onChange={ handleChange }\n        />\n        <label htmlFor=\"jobNotes\">Notes</label> \n        <textarea\n          type=\"textarea\"\n          name=\"jobNotes\"\n          value={ job.jobNotes }\n          onChange={ handleChange }\n        />        \n        <button type=\"submit\" value=\"submit\">Save</button>\n      </form>\n    </section>\n  )\n}\n\nexport default AddJob;","\n\nfunction OpenApplications({jobList}) {\n\n\n  return (\n    jobList.map((job) => (\n      <article id={job.key} key={job.key}>   \n        <div>\n          <h1>\n            {job.jobTitle} at {job.companyName}\n          </h1>\n        </div>\n\n        <div>\n          <h4>Date Posted: {job.datePosted}</h4>\n          <p>Source: {job.postingOrigin} </p>\n          <p>Type: {job.jobType} </p>\n          <h4>Contact Details:</h4>\n          <p>Name: {job.contactName} </p>\n          <p>Email: <a href={job.contactEmail}>{job.contactEmail}</a> </p>\n          <p>Notes: {job.jobNotes} </p>\n          <p>Date Applied: {job.dateSubmitted} </p>\n          <p>Follow Up 1: {job.followOne} </p>\n          <p>Follow Up 2: {job.followTwo} </p>\n          <p>Follow Up 3: {job.followThree} </p>\n        </div>\n        <hr />\n      </article>  \n      )\n    )\n  )\n}\n\nexport default OpenApplications;\n","function Info() {\n\n  return (\n    <section>\n      <h1>Info</h1>\n      <p>This was made for Juno College Winter 2021 React course by Noel Matta.</p>\n      <h2>Dev Road Map To-Dos</h2>\n      <ul>\n        <li>Authentication</li>\n        <li>Form Validation</li>\n        <li>Prop types</li>\n        <li>Add styles and make mobile responsive</li>\n        <li>Wrap open applications in collapsible accordions</li>\n        <li>Add modal to confirm if user attached a resume</li>\n        <li>Allow user to go back and edit open applications</li>\n        <li>Refactor for global state with Redux</li>\n        <li>Set up promises for autocomplete</li>\n        <li>Autocomplete error handling</li>\n      </ul>\n      <h3>This React app was also made with:</h3>\n      <ul>\n        <li><a href=\"http://dataatwork.org/data/\" target=\"_blank\" rel=\"noreferrer\">Open Skills API</a></li>\n        <li>Firebase</li>\n      </ul>\n    </section>\n  )\n}\n\nexport default Info;\n","// Dependencies\nimport { BrowserRouter as Router, Route, Switch, NavLink } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\n// Components\nimport AddJob from './AddJob';\nimport OpenApplications from './OpenApplications';\nimport Info from './Info';\n\n// Other\nimport './App.css';\nimport firebase from './firebase.js';\n\nfunction App() {\n\n  // Generate job list\n  const [jobList, setJobList] = useState([]);\n\n  useEffect(() => {\n    const jobsRef = firebase.database().ref('jobs');\n      \n    jobsRef.on('value', (snapshot) => {\n      const firebaseData = snapshot.val();\n      const jobsFromDb = [];\n\n      for (let jobDetails in firebaseData) {\n        const { jobTitle, companyName, datePosted, postingOrigin, jobType, contactName, contactEmail, jobNotes, location, dateSubmitted, followOne, followTwo, followThree } = firebaseData[jobDetails];\n\n        jobsFromDb.push({ jobTitle, companyName, datePosted, postingOrigin, jobType, contactName, contactEmail, jobNotes, location, dateSubmitted, followOne, followTwo, followThree, key: jobDetails });\n      }\n\n      setJobList(jobsFromDb);\n    })\n    \n  }, [])\n\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <header>\n          <div className=\"logo\">\n            INSERT LOGO HERE\n          </div>\n          {/* Persistent nav */}\n          <nav>\n            <ul>\n              <li><NavLink to=\"/AddJob\">Add New Job</NavLink></li>\n              <li><NavLink to=\"/OpenApplications\">Open Applications</NavLink></li>\n              <li><NavLink to=\"/Info\">Info</NavLink></li>\n            </ul>\n        </nav>\n        </header>\n\n        <div className=\"container\">\n          {/* Routing */}\n          <Switch>\n            <Route path=\"/AddJob\" render={(props) => <AddJob {...props} />} />          \n            <Route path=\"/OpenApplications\" render={(props) => <OpenApplications {...props} jobList={jobList} />} />\n            <Route path=\"/Info\" render={(props) => <Info {...props} />}/>\n          </Switch>\n        </div>\n        \n      </div>\n    </Router>\n    \n  );\n}\n\nexport default App;\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}